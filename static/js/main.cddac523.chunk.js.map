{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["convertRaw","require","convertGuid","convertString","useStyles","makeStyles","theme","appBarSpacer","marginTop","controls","marginBottom","App","classes","useState","_inputText","setInputText","_outputText","setOutputText","_inputType","setInputType","className","AppBar","CssBaseline","Container","maxWidth","Grid","container","spacing","item","xs","md","lg","Paper","TextField","label","value","multiline","rows","variant","fullWidth","onInput","e","target","FormControl","component","FormLabel","RadioGroup","aria-label","name","onChange","currentTarget","FormControlLabel","control","Radio","Button","color","onClick","result","split","filter","id","map","toLowerCase","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.cddac523.chunk.js","sourcesContent":["import './App.css';\nimport { Button, CssBaseline, AppBar, Grid, Box, Container, Paper, TextField } from '@material-ui/core';\nimport {FormControl,FormLabel, RadioGroup, Radio, FormControlLabel} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useState, useEffect } from 'react';\nconst convertRaw = require('raw-guid-converter').convertRaw\nconst convertGuid = require('raw-guid-converter').convertString\n\nconst useStyles = makeStyles((theme) => ({\n  appBarSpacer: {\n    marginTop: '10vh'\n  },\n  controls:{\n    marginTop: '1.5vh',\n    marginBottom: '1vh'\n\n  }\n}))\n\nfunction App() {\n  const classes = useStyles();\n  const [_inputText, setInputText] = useState()\n  const [_outputText, setOutputText] = useState()\n  const [_inputType, setInputType] = useState('raw')\n\n  const convertHandler = () =>{\n    let result = ''\n    debugger\n    if (_inputText){\n      if(_inputType=='raw'){\n        result = _inputText.split(\"\\n\").filter(id=>id?true:false).map((id)=>convertRaw(id))\n      }else{        \n        result = _inputText.split(\"\\n\").filter(id=>id?true:false).map((id)=>convertGuid(id).toLowerCase())\n      }\n      result = result.join(\"\\n\")\n    }\n    setOutputText(result)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        {/* <CssBaseline /> */}\n        <AppBar>\n          <p>Oracle Raw to GUID Converter</p>\n        </AppBar>\n        <CssBaseline />\n        <Container maxWidth=\"lg\" >\n          <div className={classes.appBarSpacer}></div>\n          <Grid container spacing={3}>\n            {/* From */}\n            <Grid item xs={12} md={8} lg={9}>\n              <Paper >\n                <TextField label={_inputType==='raw'?'Raw':'Guid'}  value={_inputText} multiline rows={10} variant=\"outlined\" fullWidth onInput={(e)=>setInputText(e.target.value)}></TextField>\n              </Paper>\n            </Grid>\n            {/* Controls */}\n            <Grid item xs={12} md={4} lg={3}>\n              <Paper>\n                <FormControl component=\"fieldset\" className={classes.controls}>\n                  <FormLabel component=\"legend\" >Converter input</FormLabel>\n                  <RadioGroup aria-label=\"input_type\" name=\"input_type\" value={_inputType}  onChange={(e)=>{setInputType(e.currentTarget.value)}}>\n                    <FormControlLabel value=\"raw\" control={<Radio />} label=\"Raw\" />\n                    <FormControlLabel value=\"guid\" control={<Radio />} label=\"GUID\" />\n                  </RadioGroup>\n                  <Button variant=\"contained\" color=\"primary\" onClick={convertHandler}>Convert</Button>\n                </FormControl>\n              </Paper>\n            </Grid>\n            {/* To */}\n            <Grid item xs={12} md={8} lg={9}>\n              <Paper >\n                <TextField label={_inputType==='raw'?'Guid':'Raw'} value={_outputText} multiline rows={10} variant=\"outlined\" fullWidth onInput={(e)=>setOutputText(e.target.value)}></TextField>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}